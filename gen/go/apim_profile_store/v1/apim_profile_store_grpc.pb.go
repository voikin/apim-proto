// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: apim_profile_store/v1/apim_profile_store.proto

package apim_profile_store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileStoreService_CreateApplication_FullMethodName         = "/apim_profile_store.v1.ProfileStoreService/CreateApplication"
	ProfileStoreService_GetApplication_FullMethodName            = "/apim_profile_store.v1.ProfileStoreService/GetApplication"
	ProfileStoreService_UpdateApplication_FullMethodName         = "/apim_profile_store.v1.ProfileStoreService/UpdateApplication"
	ProfileStoreService_DeleteApplication_FullMethodName         = "/apim_profile_store.v1.ProfileStoreService/DeleteApplication"
	ProfileStoreService_ListApplications_FullMethodName          = "/apim_profile_store.v1.ProfileStoreService/ListApplications"
	ProfileStoreService_AddProfile_FullMethodName                = "/apim_profile_store.v1.ProfileStoreService/AddProfile"
	ProfileStoreService_GetProfileByID_FullMethodName            = "/apim_profile_store.v1.ProfileStoreService/GetProfileByID"
	ProfileStoreService_GetLatestProfile_FullMethodName          = "/apim_profile_store.v1.ProfileStoreService/GetLatestProfile"
	ProfileStoreService_GetProfileByVersion_FullMethodName       = "/apim_profile_store.v1.ProfileStoreService/GetProfileByVersion"
	ProfileStoreService_DeleteProfile_FullMethodName             = "/apim_profile_store.v1.ProfileStoreService/DeleteProfile"
	ProfileStoreService_ListProfilesByApplication_FullMethodName = "/apim_profile_store.v1.ProfileStoreService/ListProfilesByApplication"
	ProfileStoreService_ListLatestProfiles_FullMethodName        = "/apim_profile_store.v1.ProfileStoreService/ListLatestProfiles"
)

// ProfileStoreServiceClient is the client API for ProfileStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileStoreServiceClient interface {
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*AddProfileResponse, error)
	GetProfileByID(ctx context.Context, in *GetProfileByIDRequest, opts ...grpc.CallOption) (*GetProfileByIDResponse, error)
	GetLatestProfile(ctx context.Context, in *GetLatestProfileRequest, opts ...grpc.CallOption) (*GetLatestProfileResponse, error)
	GetProfileByVersion(ctx context.Context, in *GetProfileByVersionRequest, opts ...grpc.CallOption) (*GetProfileByVersionResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error)
	ListProfilesByApplication(ctx context.Context, in *ListProfilesByApplicationRequest, opts ...grpc.CallOption) (*ListProfilesByApplicationResponse, error)
	ListLatestProfiles(ctx context.Context, in *ListLatestProfilesRequest, opts ...grpc.CallOption) (*ListLatestProfilesResponse, error)
}

type profileStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileStoreServiceClient(cc grpc.ClientConnInterface) ProfileStoreServiceClient {
	return &profileStoreServiceClient{cc}
}

func (c *profileStoreServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_CreateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_GetApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_UpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_DeleteApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_ListApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*AddProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProfileResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_AddProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) GetProfileByID(ctx context.Context, in *GetProfileByIDRequest, opts ...grpc.CallOption) (*GetProfileByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileByIDResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_GetProfileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) GetLatestProfile(ctx context.Context, in *GetLatestProfileRequest, opts ...grpc.CallOption) (*GetLatestProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestProfileResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_GetLatestProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) GetProfileByVersion(ctx context.Context, in *GetProfileByVersionRequest, opts ...grpc.CallOption) (*GetProfileByVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileByVersionResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_GetProfileByVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProfileResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) ListProfilesByApplication(ctx context.Context, in *ListProfilesByApplicationRequest, opts ...grpc.CallOption) (*ListProfilesByApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProfilesByApplicationResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_ListProfilesByApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileStoreServiceClient) ListLatestProfiles(ctx context.Context, in *ListLatestProfilesRequest, opts ...grpc.CallOption) (*ListLatestProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLatestProfilesResponse)
	err := c.cc.Invoke(ctx, ProfileStoreService_ListLatestProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileStoreServiceServer is the server API for ProfileStoreService service.
// All implementations must embed UnimplementedProfileStoreServiceServer
// for forward compatibility.
type ProfileStoreServiceServer interface {
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	AddProfile(context.Context, *AddProfileRequest) (*AddProfileResponse, error)
	GetProfileByID(context.Context, *GetProfileByIDRequest) (*GetProfileByIDResponse, error)
	GetLatestProfile(context.Context, *GetLatestProfileRequest) (*GetLatestProfileResponse, error)
	GetProfileByVersion(context.Context, *GetProfileByVersionRequest) (*GetProfileByVersionResponse, error)
	DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error)
	ListProfilesByApplication(context.Context, *ListProfilesByApplicationRequest) (*ListProfilesByApplicationResponse, error)
	ListLatestProfiles(context.Context, *ListLatestProfilesRequest) (*ListLatestProfilesResponse, error)
	mustEmbedUnimplementedProfileStoreServiceServer()
}

// UnimplementedProfileStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileStoreServiceServer struct{}

func (UnimplementedProfileStoreServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedProfileStoreServiceServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedProfileStoreServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedProfileStoreServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedProfileStoreServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedProfileStoreServiceServer) AddProfile(context.Context, *AddProfileRequest) (*AddProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedProfileStoreServiceServer) GetProfileByID(context.Context, *GetProfileByIDRequest) (*GetProfileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByID not implemented")
}
func (UnimplementedProfileStoreServiceServer) GetLatestProfile(context.Context, *GetLatestProfileRequest) (*GetLatestProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProfile not implemented")
}
func (UnimplementedProfileStoreServiceServer) GetProfileByVersion(context.Context, *GetProfileByVersionRequest) (*GetProfileByVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByVersion not implemented")
}
func (UnimplementedProfileStoreServiceServer) DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileStoreServiceServer) ListProfilesByApplication(context.Context, *ListProfilesByApplicationRequest) (*ListProfilesByApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfilesByApplication not implemented")
}
func (UnimplementedProfileStoreServiceServer) ListLatestProfiles(context.Context, *ListLatestProfilesRequest) (*ListLatestProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestProfiles not implemented")
}
func (UnimplementedProfileStoreServiceServer) mustEmbedUnimplementedProfileStoreServiceServer() {}
func (UnimplementedProfileStoreServiceServer) testEmbeddedByValue()                             {}

// UnsafeProfileStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileStoreServiceServer will
// result in compilation errors.
type UnsafeProfileStoreServiceServer interface {
	mustEmbedUnimplementedProfileStoreServiceServer()
}

func RegisterProfileStoreServiceServer(s grpc.ServiceRegistrar, srv ProfileStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileStoreService_ServiceDesc, srv)
}

func _ProfileStoreService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_GetApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_AddProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).AddProfile(ctx, req.(*AddProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_GetProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).GetProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_GetProfileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).GetProfileByID(ctx, req.(*GetProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_GetLatestProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).GetLatestProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_GetLatestProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).GetLatestProfile(ctx, req.(*GetLatestProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_GetProfileByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).GetProfileByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_GetProfileByVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).GetProfileByVersion(ctx, req.(*GetProfileByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_ListProfilesByApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesByApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).ListProfilesByApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_ListProfilesByApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).ListProfilesByApplication(ctx, req.(*ListProfilesByApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileStoreService_ListLatestProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileStoreServiceServer).ListLatestProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileStoreService_ListLatestProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileStoreServiceServer).ListLatestProfiles(ctx, req.(*ListLatestProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileStoreService_ServiceDesc is the grpc.ServiceDesc for ProfileStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apim_profile_store.v1.ProfileStoreService",
	HandlerType: (*ProfileStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ProfileStoreService_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ProfileStoreService_GetApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ProfileStoreService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ProfileStoreService_DeleteApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _ProfileStoreService_ListApplications_Handler,
		},
		{
			MethodName: "AddProfile",
			Handler:    _ProfileStoreService_AddProfile_Handler,
		},
		{
			MethodName: "GetProfileByID",
			Handler:    _ProfileStoreService_GetProfileByID_Handler,
		},
		{
			MethodName: "GetLatestProfile",
			Handler:    _ProfileStoreService_GetLatestProfile_Handler,
		},
		{
			MethodName: "GetProfileByVersion",
			Handler:    _ProfileStoreService_GetProfileByVersion_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileStoreService_DeleteProfile_Handler,
		},
		{
			MethodName: "ListProfilesByApplication",
			Handler:    _ProfileStoreService_ListProfilesByApplication_Handler,
		},
		{
			MethodName: "ListLatestProfiles",
			Handler:    _ProfileStoreService_ListLatestProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apim_profile_store/v1/apim_profile_store.proto",
}
